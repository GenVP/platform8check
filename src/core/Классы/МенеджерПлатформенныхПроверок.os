#Использовать logos
#Использовать tempfiles
#Использовать v8runner

#Использовать "./internal"

Перем ОбработчикРезультатов; // Объект.ОбработчикРезультатов

Перем КонтекстИсточника; // Структура - поля КаталогБазы, Пользователь, Пароль, МожноИспользоватьДляПроверки
Перем ЗапущенныеПроверки; // Соответствие - Ключ - строка ключей проверки, Значение - Описание запущенной проверки

Перем ВремяОжидания; // Время ожидания завершения проверки
Перем ВремяОжиданияМакс; // Максимальное время ожидания завершения проверки

#Область Конструктор

Процедура ПриСозданииОбъекта()

	ЗапущенныеПроверки = Новый Соответствие;
	ОбработчикРезультатов = Новый ОбработчикРезультатовПлатформеннойПроверки1C8;

	ВремяОжидания = 600; // 10 мин
	ВремяОжиданияМакс = 18000; // 5 ч

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Устанавливает параметры шаблонной базы для платформенной	 проверки
//
// Параметры:
//  КаталогБазы - Строка - Каталог шаблонной базы для платформенной проверки
//  Пользователь - Строка - Пользователь, если задан для шаблонной базы
//  Пароль - Строка - Пароль, если задан для шаблонной базы
//
Функция КонтекстБазыИсточника(Знач ПарамКаталогБазы, Знач ПарамПользователь, Знач ПарамПароль) Экспорт

	КонтекстИсточника = Новый Структура;
	КонтекстИсточника.Вставить("КаталогБазы", ПарамКаталогБазы);
	КонтекстИсточника.Вставить("Пользователь", ПарамПользователь);
	КонтекстИсточника.Вставить("Пароль", ПарамПароль);

	Возврат ЭтотОбъект;

КонецФункции

Функция КаталогИсходныхКодов(ПарамКаталогИсходников) Экспорт

	ОбработчикРезультатов.УстановитьКаталогИсходныхКодов(ПарамКаталогИсходников);

	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает время ожидания результатов платформенной проверки
//
// Параметры:
//  ПарамВремяОжидания - Число - Время ожидания завершения платформенной проверки
//
Функция ВремяОжидания(Знач ПарамВремяОжидания) Экспорт

	БылоВремяОжидания = ВремяОжидания; 
	ВремяОжидания = ПарамВремяОжидания;

	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает максимальное время ожидания результатов платформенной проверки
//
// ПараметрыЖ
//  ПарамВремяОжиданияМакс - Число - Максимальное время ожидания платформенной проверки
//
Функция МаксимальноеВремяОжидания(Знач ПарамВремяОжиданияМакс) Экспорт

	БылоВремяОжиданияМакс = ВремяОжиданияМакс; 
	ВремяОжиданияМакс = ПарамВремяОжиданияМакс;

	Возврат ЭтотОбъект;

КонецФункции

// Запускает на выполнение платформенные проверки по переданному списку ключей
//
// Параметры:
//	КлючиПлатформеннойПроверки - Строка - список ключей платформенной проверки разделенных ","
//  МожноИспользоватьБазуИсточника - Булево - признак использования базы источника (например, если эта база временная) или необходимость создания её копии
// 
Функция НачатьПроверку(
	Знач КлючиПлатформеннойПроверки,
	Знач МожноИспользоватьБазуИсточника = Ложь) Экспорт

	Если КонтекстИсточника = Неопределено Тогда
		ВызватьИсключение "Не установлен контекст источника";
	КонецЕсли;

	КлючиПлатформеннойПроверки = СтрЗаменить(КлючиПлатформеннойПроверки, Символы.ПС, "");

	Если ЗапущенныеПроверки[КлючиПлатформеннойПроверки] <> Неопределено Тогда
		Сообщить(СтрШаблон("Для ключей %1 уже запущена платформенная проверка", КлючиПлатформеннойПроверки));
		Возврат ЭтотОбъект;
	КонецЕсли;

	Если МожноИспользоватьБазуИсточника Тогда
		КаталогБазы = КонтекстИсточника.КаталогБазы;
	Иначе
		КаталогБазы = СоздатьВременнуюКопиюБазыИсточника();
	КонецЕсли;

	// Заполнение соответствия ключей проверки
	КлючиСоответствие = Новый Соответствие;
	КлючМассив = СтрРазделить(КлючиПлатформеннойПроверки, ",");
	Для Каждого Ключ Из КлючМассив Цикл
		ЗначениеКлюча = СокрЛП(Ключ);
		Если НЕ СтрНачинаетсяС(ЗначениеКлюча, "-") Тогда
			ЗначениеКлюча = "-" + ЗначениеКлюча;
		КонецЕсли; 
		КлючиСоответствие.Вставить(ЗначениеКлюча, Истина);
	КонецЦикла;

	НовыйУправлениеКонфигуратором = Новый УправлениеКонфигуратором(); 
	НовыйУправлениеКонфигуратором.УстановитьКонтекст(
		СтрШаблон("/F ""%1""", КаталогБазы),
		КонтекстИсточника.Пользователь,
		КонтекстИсточника.Пароль);

	ФайлРезультата = ВременныеФайлы.НовоеИмяФайла("log");
	НовыйУправлениеКонфигуратором.УстановитьИмяФайлаСообщенийПлатформы(ФайлРезультата);
	НовыйУправлениеКонфигуратором.УстановитьПризнакОжиданияВыполненияПрограммы(Ложь);

	Сообщить(СтрШаблон("[%1] Запуск проверки с ключами %2 для базы %3 и результатом в %3",
			ТекущаяДата(), КлючиПлатформеннойПроверки, КаталогБазы));

	НовыйУправлениеКонфигуратором.ВыполнитьРасширеннуюПроверкуКонфигуратора(КлючиСоответствие);

	ОписаниеПроверки = Новый Структура;
	ОписаниеПроверки.Вставить("НачалоПроверки", ТекущаяДата());
	ОписаниеПроверки.Вставить("КаталогБазы", КаталогБазы);
	ОписаниеПроверки.Вставить("ФайлРезультата", ФайлРезультата);
	ОписаниеПроверки.Вставить("Выполняется", Истина);
	
	ЗапущенныеПроверки.Вставить(КлючиПлатформеннойпроверки, ОписаниеПроверки);

	Возврат ЭтотОбъект;

КонецФункции

Функция ДобавитьРезультатПроверки(Знач КлючиПлатформеннойпроверки, Знач ФайлРезультата) Экспорт

	Если ЗапущенныеПроверки[КлючиПлатформеннойПроверки] <> Неопределено Тогда
		Сообщить(СтрШаблон("Для ключей %1 уже запущена платформенная проверка", КлючиПлатформеннойПроверки));
		Возврат ЭтотОбъект;
	КонецЕсли;

	КлючиПлатформеннойПроверки = СтрЗаменить(КлючиПлатформеннойПроверки, Символы.ПС, "");

	ОписаниеПроверки = Новый Структура;
	ОписаниеПроверки.Вставить("НачалоПроверки", ТекущаяДата());
	ОписаниеПроверки.Вставить("КаталогБазы", Неопределено);
	ОписаниеПроверки.Вставить("ФайлРезультата", ФайлРезультата);
	ОписаниеПроверки.Вставить("Выполняется", Истина);
	
	ЗапущенныеПроверки.Вставить(КлючиПлатформеннойпроверки, ОписаниеПроверки);

	Возврат ЭтотОбъект;

КонецФункции

Функция УстановитьФильтр(ФильтрПроверки)  Экспорт

	ОбработчикРезультатов.УстановитьФильтр(ФильтрПроверки);

	Возврат ЭтотОбъект;

КонецФункции

// Проверка завершения одной из запущенных платформенных проверок и возможности обработки её результата.
// Возможно обработать результат, как одной завершенной проверки, так и дождаться завершения всех проверок.
// После обработки результата ошибки будут доступны через ТаблицаОшибок(). 
//
Функция ВозможнаОбработкаРезультата() Экспорт

	ОбработанныеКлючи = Новый Массив;

	ФайлНайден = Ложь;
	Пока НЕ ФайлНайден Цикл
		Для Каждого КлючИЗначение Из ЗапущенныеПроверки Цикл
			ОписаниеПроверки = КлючИЗначение.Значение;
			Если ОписаниеПроверки.Выполняется Тогда
				Если ДоступенФайлРезультата(ОписаниеПроверки.ФайлРезультата) Тогда
					ОписаниеПроверки.Выполняется = Ложь;
					ФайлНайден = Истина;
				ИначеЕсли ТекущаяДата() > ОписаниеПроверки.НачалоПроверки + ВремяОжиданияМакс Тогда
					Сообщить(СтрШаблон("[%1] Превышение времени ожидания проверки с ключами %1", ТекущаяДата(), КлючИЗначение.Ключ));
					// Удаление платформенной проверки из выполняемых
					ОбработанныеКлючи.Добавить(КлючИЗначение.Ключ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Удаление обработанных платформенных проверок (превышено время ожидания)
		Для Каждого КлючПлатформеннойПроверки Из ОбработанныеКлючи Цикл
			ЗапущенныеПроверки.Удалить(КлючПлатформеннойПроверки);
		КонецЦикла;
		Если ЗапущенныеПроверки.Количество() = 0 Тогда
			Прервать; // Нет проверок к ожиданию
		КонецЕсли;
		// Не найдено завершенных поверок - ожидание завершения
		Если НЕ ФайлНайден Тогда
			Сообщить(СтрШаблон("[%1] Ожидание завершения проверок %2 с", ТекущаяДата(), ВремяОжидания));
			Приостановить (ВремяОжидания * 1000);
		КонецЕсли;
	КонецЦикла;

	Возврат ФайлНайден;

КонецФункции

// Обработка доступных результатов платформенных проверок. Результаты обрабатываются только один раз.
// После обработки результата ошибки будут доступны через ТаблицаОшибок().
//
Процедура ОбработатьРезультат() Экспорт
	
	ОбработанныеКлючи = Новый Массив;

	Для Каждого КлючИЗначение Из ЗапущенныеПроверки Цикл
		ОписаниеПроверки = КлючИЗначение.Значение;
		ФайлРезультата = ОписаниеПроверки.ФайлРезультата;
		Если НЕ ОписаниеПроверки.Выполняется Тогда
			// Обработка файла результатат и добавление ошибок
			Сообщить(СтрШаблон("[%1] Начало Обработка ошибок для ключей %2, файл результата %3",
				ТекущаяДата(), КлючИЗначение.Ключ, ОписаниеПроверки.ФайлРезультата));
			ОбработчикРезультатов.ОбработатьФайлРезультата(ОписаниеПроверки.ФайлРезультата);
			Сообщить(СтрШаблон("[%1] Окончание Обработка ошибок для ключей %2, файл результата %3",
				ТекущаяДата(), КлючИЗначение.Ключ, ОписаниеПроверки.ФайлРезультата));
			// Удаление обработанного файла результата
			ОбработанныеКлючи.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	// Удаление обработанных платформенных проверок
	Для Каждого КлючПлатформеннойПроверки Из ОбработанныеКлючи Цикл
		ЗапущенныеПроверки.Удалить(КлючПлатформеннойПроверки);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗавершитьВсеПроверки() Экспорт

	Если ЗапущенныеПроверки.Количество() > 0 Тогда
		Пока ВозможнаОбработкаРезультата() Цикл
			ОбработатьРезультат();
		КонецЦикла;
	КонецЕсли;

	ВременныеФайлы.Удалить();

	Возврат ЭтотОбъект;

КонецФункции

Функция ТаблицаОшибок() Экспорт

	Возврат ОбработчикРезультатов.ТаблицаОшибок();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФунции

Функция СоздатьВременнуюКопиюБазыИсточника()

	КаталогВременнойБазы = ВременныеФайлы.СоздатьКаталог();

	Сообщить(СтрШаблон("[%1] Копирование базы из %2 в %3",
		ТекущаяДата(), КонтекстИсточника.КаталогБазы, КаталогВременнойБазы));

	ФайлБазыИсточника = ОбъединитьПути(КонтекстИсточника.КаталогБазы, "1Cv8.1CD");
	ФайлВременнойБазы = ОбъединитьПути(КаталогВременнойБазы, "1Cv8.1CD");

	КопироватьФайл(ФайлБазыИсточника, ФайлВременнойБазы);

	Возврат КаталогВременнойБазы;

КонецФункции

Функция ДоступенФайлРезультата(ФайлРезультата)
	
	Попытка
		ЧтениеТекста = Новый ЧтениеТекста;
		ЧтениеТекста.Открыть(ФайлРезультата);
		ЧтениеТекста.Закрыть();
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти