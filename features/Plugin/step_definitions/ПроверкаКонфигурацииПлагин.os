#Использовать v8runner
#Использовать tempfiles
#Использовать fs

// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯСоздаюФайлРезультатаИСохраняюВПеременную");
	ВсеШаги.Добавить("ЯСоздаюФайлНастроекПроверкиИСохраняюВПеременную");
	ВсеШаги.Добавить("ЯЗаполняюФайлНастроекПроверкиЗначениями");
	ВсеШаги.Добавить("ЯСобираюПлагинИСохраняюЕгоВПеременную");
	ВсеШаги.Добавить("ЯВыполняюКомандуСИменемИПараметрами");
	ВсеШаги.Добавить("ЯСоздаюФайловоеХранилищеДляБазыИСохраняюВПеременную");
	ВсеШаги.Добавить("КоличествоСтрокВФайлеРавно");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт

	ВременныеФайлы.Удалить();

КонецПроцедуры

// Я создаю файл результата и сохраняю в переменную "ФайлРезультата"
Процедура ЯСоздаюФайлРезультатаИСохраняюВПеременную(ИмяПеременнойРезультата) Экспорт

	ПутьКФайлу = ВременныеФайлы.НовоеИмяФайла("json");
	БДД.СохранитьВКонтекст(ИмяПеременнойРезультата, ПутьКФайлу);

КонецПроцедуры

//Я создаю файл настроек проверки и сохраняю в переменную "ФайлНастроек"
Процедура ЯСоздаюФайлНастроекПроверкиИСохраняюВПеременную(ИмяПеременнойФайлаНастроек) Экспорт

	ПутьКФайлуНастроек = ВременныеФайлы.НовоеИмяФайла("json");
	БДД.СохранитьВКонтекст(ИмяПеременнойФайлаНастроек, ПутьКФайлуНастроек);

КонецПроцедуры

//Я заполняю файл настроек проверки "ФайлНастроек" значениями:
Процедура ЯЗаполняюФайлНастроекПроверкиЗначениями(ФайлНастроек, ТаблицаДанных) Экспорт

	Настройки = Новый Структура;
	Настройки.Вставить("Keys", Новый Массив);

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Имя = СтрокаТаблицы.К0;
		Значение = ЗаменитьПеременнуюВЗначении(СтрокаТаблицы.К1);
		Если Имя = "Key" Тогда
			Настройки.Keys.Добавить(Значение);
		Иначе
			Настройки.Вставить(Имя, Значение);
		КонецЕсли;
	КонецЦикла;

	ПутьКФайлу = ЗаменитьПеременнуюВЗначении(ФайлНастроек);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ПутьКФайлу);
	ЗаписатьJSON(ЗаписьJSON, Настройки);
	ЗаписьJSON.Закрыть();

КонецПроцедуры

//Я собираю плагин и сохраняю его в переменную "ПлагинПроверки"
Процедура ЯСобираюПлагинИСохраняюЕгоВПеременную(ИмяПеременнойПлагина) Экспорт

	КаталогПлагина = ОбъединитьПути(БДД.КаталогПроверяемогоПроекта(), "plugin");

	КомандаOpm = Новый Команда;
	КомандаOpm.УстановитьРабочийКаталог(КаталогПлагина);
	КомандаOpm.УстановитьКоманду("opm");
	КомандаOpm.ДобавитьПараметр("build");	
        
	КодВозврата = КомандаOpm.Исполнить();
	Если КодВозврата <> 0  Тогда
		ВызватьИсключение КомандаOpm.ПолучитьВывод();
	КонецЕсли;

	МассивФайлов = НайтиФайлы(КаталогПлагина, "*.ospx");
	Если МассивФайлов.Количество() <> 1 Тогда
		ВызватьИсключение "Не найден собранный файл пакета platform8check_plugin";
	КонецЕсли;
	ПутьКФайлуПлагина = МассивФайлов[0].ПолноеИмя;

	БДД.СохранитьВКонтекст(ИмяПеременнойПлагина, ПутьКФайлуПлагина);

КонецПроцедуры

//Я выполняю команду с именем "ИмяКоманды" и параметрами "Параметры команды"
Процедура ЯВыполняюКомандуСИменемИПараметрами(ИмяКоманды, СтрокаПараметров) Экспорт

	Команда = Новый Команда;
	Команда.УстановитьКоманду(ЗаменитьПеременнуюВЗначении(ИмяКоманды));
		
	МассивПараметров = СтрРазделить(СтрокаПараметров, " ", Ложь);
	Для Каждого ПараметрКоманды Из МассивПараметров Цикл
		Команда.ДобавитьПараметр(ЗаменитьПеременнуюВЗначении(ПараметрКоманды));	
	КонецЦикла;

	КодВозврата = Команда.Исполнить();
	Если КодВозврата <> 0  Тогда
		ВызватьИсключение Команда.ПолучитьВывод();
	КонецЕсли;

КонецПроцедуры

//Я создаю файловое хранилище для базы "КаталогБазы" и сохраняю в переменную "КаталогХранилища"
Процедура ЯСоздаюФайловоеХранилищеДляБазыИСохраняюВПеременную(КаталогБазы, ИмяПеременнойХранилища) Экспорт

	ВременнаяБаза = ЗаменитьПеременнуюВЗначении(КаталогБазы);
	КаталогХранилища = ВременныеФайлы.СоздатьКаталог();

	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	УправлениеКонфигуратором.УстановитьКонтекст(СтрШаблон("/F""%1""", ВременнаяБаза), "", "");
	УправлениеКонфигуратором.СоздатьФайловоеХранилищеКонфигурации(КаталогХранилища, "Администратор");

	БДД.СохранитьВКонтекст(ИмяПеременнойХранилища, КаталогХранилища);

КонецПроцедуры

//Количество строк в файле "ПутьКФайлу" равно 1
Процедура КоличествоСтрокВФайлеРавно(Знач ПутьКФайлу, Знач КоличествоСтрок) Экспорт

	Файл = Новый Файл(ЗаменитьПеременнуюВЗначении(ПутьКФайлу));
	Если НЕ Файл.Существует() Тогда
		КоличествоСтрокВФайле = 0;
	Иначе
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(Файл.ПолноеИмя);
		КоличествоСтрокВФайле = ТекстДок.КоличествоСтрок();
		ТекстДок = Неопределено;
	КонецЕсли;
	Ожидаем.Что(КоличествоСтрокВФайле).Равно(ЗаменитьПеременнуюВЗначении(КоличествоСтрок));

КонецПроцедуры

Функция ЗаменитьПеременнуюВЗначении(Знач Значение) Экспорт

	Если ТипЗнч(Значение) = Тип("Строка") И СтрНачинаетсяС(Значение, "$") И СтрЗаканчиваетсяНа(Значение, "$") Тогда
		Результат = БДД.ЗначениеСУчетомПеременныхКонтекста(Сред(Значение, 2, СтрДлина(Значение) - 2));
	Иначе
		Результат = Значение;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции