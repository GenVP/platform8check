#Использовать v8runner
#Использовать tempfiles

// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯСохраняюПутьКИсходнымКодамТестовойКонфигурацииВ");
	ВсеШаги.Добавить("ЯСоздаюВременнуюБазуИСохраняюВПеременную");
	ВсеШаги.Добавить("ЯЗагружаюКонфигурациюИзИсходниковВБазу");
	ВсеШаги.Добавить("ЯСоздаюМенеджерПроверокИПомещаюВПеременную");
	ВсеШаги.Добавить("ЯУстанавливаюДляПроверокКонтекстБазыИсточника");
	ВсеШаги.Добавить("ЯУстанавливаюДляПроверокКаталогИсходников");
	ВсеШаги.Добавить("ЯУстанавливаюДляПроверокВремяОжидания");
	ВсеШаги.Добавить("ЯУстанавливаюДляПроверокМасимальноеВремяОжидания");
	ВсеШаги.Добавить("ЯНачинаюПроверкуСКлючами");
	ВсеШаги.Добавить("ЯДобавляюРезультатПроверкиВФайлеСКлючами");
	ВсеШаги.Добавить("ЯсохраняюРезультатЗавершенныхПроверокВПеременной");
	ВсеШаги.Добавить("КоличествоСтрокВТаблицеРавно");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт

КонецПроцедуры

//Я сохраняю путь к исходным кодам тестовой конфигурации в "ИмяПеременной"
Процедура ЯСохраняюПутьКИсходнымКодамТестовойКонфигурацииВ(ИмяПеременной)

	ПутьККаталогу = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures/testbase/src");

	БДД.СохранитьВКонтекст(ИмяПеременной, ПутьККаталогу);

КонецПроцедуры

//Я создаю временную базу и сохраняю в переменную "ВременнаяБаза"
Процедура ЯСоздаюВременнуюБазуИСохраняюВПеременную(Знач ВременнаяБаза) Экспорт

	ПутьКВременнойБазе = ВременныеФайлы.СоздатьКаталог();

	УправлениеКонфигуратором = Новый УправлениеКонфигуратором;
	УправлениеКонфигуратором.СоздатьФайловуюБазу(ПутьКВременнойБазе);

	БДД.СохранитьВКонтекст(ВременнаяБаза, СтрШаблон("/F%1", ПутьКВременнойБазе));

КонецПроцедуры

//Я загружаю конфигурацию из файлов в каталоге "КаталогИсходников" в базу "ВременнаяБаза"
Процедура ЯЗагружаюКонфигурациюИзФайловВКаталогеВБазу(КаталогИсходников, ВременнаяБаза) Экспорт

	УправлениеКонфигуратором = Новый УправлениеКонфигуратором;
	УправлениеКонфигуратором.УстановитьКонтекст(ВременнаяБаза);
	УправлениеКонфигуратором.ЗагрузитьКонфигурациюИзФайлов(КаталогИсходников, "", "", Ложь);

КонецПроцедуры

//Я создаю менеджер проверок и помещаю в переменную "МенеджерПроверок"
Процедура ЯСоздаюМенеджерПроверокИПомещаюВПеременную(ИмяПеременой) Экспорт

	МенеджерПроверок = Новый МенеджерПлатформенныхПроверок();
	БДД.СохранитьВКонтекст(ИмяПеременой, МенеджерПроверок);

КонецПроцедуры

//Я устанавливаю для проверок контекст базы источника "КаталогБазы" 
Процедура ЯУстанавливаюДляПроверокКонтекстБазыИсточника(КаталогБазы) Экспорт

	МенеджерПроверок = БДД.ПолучитьИзКонтекста("МенеджерПроверок");
	МенеджерПроверок.КонтекстБазыИсточника(КаталогБазы);

КонецПроцедуры

//Я устанавливаю для проверок каталог исходных кодов "КаталогИсходников" 
Процедура ЯУстанавливаюДляПроверокКаталогИсходныхКодов(КаталогИсходников) Экспорт

	МенеджерПроверок = БДД.ПолучитьИзКонтекста("МенеджерПроверок");
	МенеджерПроверок.КаталогИсходныхКодов(КаталогИсходников);

КонецПроцедуры

//Я устанавливаю для проверок время ожидания 60
Процедура ЯУстанавливаюДляПроверокВремяОжидания(ВремяОжидания) Экспорт

	МенеджерПроверок = БДД.ПолучитьИзКонтекста("МенеджерПроверок");
	МенеджерПроверок.ВремяОжидания(ВремяОжидания);

КонецПроцедуры

//Я устанавливаю для проверок максимальное время ожидания 5400
Процедура ЯУстанавливаюДляПроверокМасимальноеВремяОжидания(МаксимальноеВремяОжидания) Экспорт

	МенеджерПроверок = БДД.ПолучитьИзКонтекста("МенеджерПроверок");
	МенеджерПроверок.МаксимальноеВремяОжидания(МаксимальноеВремяОжидания);

КонецПроцедуры

//Я начинаю проверку с ключами "КлючиПроверки"
Процедура ЯНачинаюПроверкуСКлючами(КлючиПроверки) Экспорт

	МенеджерПроверок = БДД.ПолучитьИзКонтекста("МенеджерПроверок");
	МенеджерПроверок.НачатьПроверку(КлючиПроверки);

КонецПроцедуры

//Я Добавляю результат проверки из переменной "ИмяПеременной" с ключами "КлючиПроверки" 
Процедура ЯДобавляюРезультатПроверкиВФайлеСКлючами(ИмяПеременной, КлючиПроверки) Экспорт

	МенеджерПроверок = БДД.ПолучитьИзКонтекста("МенеджерПроверок");
	ФайлРезультатаПроверки = БДД.ПолучитьИзКонтекста("ИмяПеременной");
	МенеджерПроверок.ДобавитьРезультатПроверки(КлючиПроверки, ФайлРезультатаПроверки);

КонецПроцедуры

//Я сохраняю результат завершенных проверок в переменной "ТаблицуОшибок"
Процедура ЯсохраняюРезультатЗавершенныхПроверокВПеременной(ИмяПеременной) Экспорт

	МенеджерПроверок = БДД.ПолучитьИзКонтекста("МенеджерПроверок");
	МенеджерПроверок.ЗавершитьВсеПроверки();

	ТаблицаОшибок = МенеджерПроверок.ТаблицаОшибок();
	БДД.СохранитьВКонтекст(ИмяПеременной, ТаблицаОшибок);

КонецПроцедуры

//Количество строк в таблице "ТаблицаОшибок" равно 17
Процедура КоличествоСтрокВТаблицеРавно(ИмяПеременной) Экспорт

	Таблица = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	Ожидаем.Что(Таблица).ИмеетДлину(ОжидаемоеКоличество);

КонецПроцедуры
